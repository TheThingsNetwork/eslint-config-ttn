
# use babel parser (requires babel-eslint)
parser: babel-eslint

env:
  # browser global variables
  browser: true

  # enable all ECMAScript 6 features (except for modules)
  es6: true

globals:
  __DEV__: false
  __CLIENT__: false
  __DEVTOOLS__: false
  module: false

# enable plugins
plugins:
  - react
  - babel
  - no-unused-vars-rest

# enable all language features
parserOptions:
  ecmaFeatures:
    # enable arrow functions
    arrowFunctions: true

    # enable binary literals
    binaryLiterals: true

    # enable let and const (aka block bindings)
    blockBindings: true

    # enable classes
    classes: true

    # enable default function parameters
    defaultParams: true

    # enable destructuring
    destructuring: true

    # enable for-of loops
    forOf: true

    # enable generators
    generators: true

    # enable modules and global strict mode
    modules: true

    # enable computed object literal property names
    objectLiteralComputedProperties: true

    # enable duplicate object literal properties in strict mode
    objectLiteralDuplicateProperties: true

    # enable object literal shorthand methods
    objectLiteralShorthandMethods: true

    # enable object literal shorthand properties
    objectLiteralShorthandProperties: true

    # enable octal literals
    octalLiterals: true

    # enable the regular expression u flag
    regexUFlag: true

    # enable the regular expression y flag
    regexYFlag: true

    # enable the rest parameters
    restParams: true

    # enable the spread operator
    spread: true

    # enable super references inside of functions
    superInFunctions: true

    # enable template strings
    templateStrings: true

    # enable code point escapes
    unicodeCodePointEscapes: true

    # allow return statements in the global scope
    globalReturn: true

    # enable JSX
    jsx: true

# configure rules
rules:

  # force dangling commas
  comma-dangle:
    - error
    - always-multiline

  # do not force camel-case
  camelcase:
    - off

  # disallow var
  no-var:
    - error

  # disallow console.log
  no-console:
    - error
    - allow:
        - warn

  # disallow if (true) and if (false)
  no-constant-condition:
    - error

  # disallow duplicate fn arguments
  no-dupe-args:
    - error

  # disallow duplicate object keys
  no-dupe-keys:
    - error

  # disallow duplicate case statements
  no-duplicate-case:
    - error

  # disallow faulty function assignments
  no-func-assign:
    - error

  # disallow decalring functions inside nested block
  no-inner-declarations:
    - warn

  # prevent invalid regexes
  no-invalid-regexp:
    - error

  # prevent spacing characters other than space
  no-irregular-whitespace:
    - error

  # prevent !a in b instead of !(a in b) bug
  no-negated-in-lhs:
    -  error

  # prevent the accidental calling of global objects as functions
  no-obj-calls:
    - error

  # disallow [,,]
  no-sparse-arrays:
    - error

  # disallow unreachable code
  no-unreachable:
    - error

  # never compare to NaN
  use-isnan:
    - error

  # ensure string compared to typeof is valid
  valid-typeof:
    - error

  # enforce return statements in callbacks of array’s methods
  array-callback-return:
    - error

  # specify curly brace conventions for all control statements
  curly:
    - error
    - all

  # enforce consistent newlines before or after dots
  dot-location:
    - error
    - property

  # encourage use of dot notation whenever possible
  dot-notation:
    - error

  # require use of === and !==
  eqeqeq:
    - error

  # disallow use of multiple spaces
  no-multi-spaces:
    - error

  # disallow unnecessary function binding
  no-extra-bind:
    - warn

  # disallow creation of functions within loops
  no-loop-func:
    - error

  # disallow reassignment of function parameters
  no-param-reassign:
    - error

  # disallow assignments where both sides are exactly the same
  no-self-assign:
    - error

  # disallow use of undefined
  no-undefined:
    - off

  # disallow use of undefined variables
  no-undef:
    - error

  # disallow unused vars
  no-unused-vars:
    - off

  no-unused-vars-rest/no-unused-vars:
    - error
    - args: none
      caughtErrors: none
      ignoreDestructuredVarsWithRest: true

  # disallow use of variables before they are defined
  no-use-before-define:
    - warn

  # enforce spacing before and after comma
  comma-spacing:
    - error

  # enforce one true comma style
  comma-style:
    - error
    - last

  indent:
    - error
    - 2
    - SwitchCase: 0
      MemberExpression: 1

  # require or disallow padding inside computed properties
  computed-property-spacing:
    - error

  # enforce spacing before and after keywords
  keyword-spacing:
    - error

  # disallow mixed spaces and tabs for indentation
  no-mixed-spaces-and-tabs:
    - error

  # disallow space between function identifier and application
  no-spaced-func:
    - error

  # disallow trailing whitespace at the end of lines
  no-trailing-spaces:
    - error

  # enforce operators to be placed before or after line breaks
  operator-linebreak:
    - error
    - before
    - overrides:
       =: after

  # require quotes around object literal property names
  quote-props:
    - error
    - as-needed
    - keywords: true

  # specify whether backticks, double or single quotes should be used
  quotes:
    - error
    - double
    - avoidEscape: true
      allowTemplateLiterals: true

  jsx-quotes:
    - error
    - prefer-double

  # require or disallow use of semicolons instead of ASI
  semi:
    - error
    - never

  # require or disallow a space before blocks
  space-before-blocks:
    - error

  # require or disallow a space before function opening parenthesis
  space-before-function-paren:
    - error

  # require or disallow a space immediately following the // or /* in a comment
  spaced-comment:
    - error

  # require space before/after arrow function’s arrow
  arrow-spacing:
    - error

  # suggest using const declaration for variables that are never reassigned after declared
  prefer-const:
    -  warn

  # suggest using the rest parameters instead of arguments
  prefer-rest-params:
    - error

  # suggest using the spread operator instead of .apply()
  prefer-spread:
    - error

  # enforce spacing around embedded expressions of template strings
  template-curly-spacing:
    - error

  # enforce spacing around the * in yield* expressions
  yield-star-spacing:
    - error
    - both

  # Prevent usage of deprecated methods
  react/no-deprecated:
    - error

  # Prevent direct mutation of this.state
  react/no-direct-mutation-state:
    - error

  # Prevent usage of unknown DOM property (fixable)
  react/no-unknown-property:
    - error

  # Enforce ES5 or ES6 class for React Components
  react/prefer-es6-class:
    - error

  # Prevent missing React when using JSX
  react/react-in-jsx-scope:
    - error

  # Prevent extra closing tags for components without children
  react/self-closing-comp:
    - warn

  # Prevent missing parentheses around multilines JSX (fixable)
  react/jsx-wrap-multilines:
    - error

  # Enforce boolean attributes notation in JSX (fixable)
  react/jsx-boolean-value:
    - error

  # Validate closing bracket location in JSX (fixable)
  react/jsx-closing-bracket-location:
    - error

  # Enforce or disallow spaces inside of curly braces in JSX attributes (fixable)
  react/jsx-curly-spacing:
    - error

  # Validate props indentation in JSX (fixable)
  react/jsx-indent-props:
    - error
    - 2

  # Validate JSX indentation
  react/jsx-indent:
    - error
    - 2

  # Validate JSX has key prop when in array or iterator
  react/jsx-key:
    - error

  # Prevent usage of .bind() and arrow functions in JSX props
  react/jsx-no-bind:
    - warn

  # Prevent duplicate props in JSX
  react/jsx-no-duplicate-props:
    - error

  # Validate spacing before closing bracket in JSX (fixable)
  react/jsx-space-before-closing:
    - error

  # Prevent React to be incorrectly marked as unused
  react/jsx-uses-react: 1

  # Prevent variables used in JSX to be incorrectly marked as unused
  react/jsx-uses-vars: 1

  # Handles async/await functions correctly
  generator-star-spacing:
    - error
    - both

  # Handles destructuring arrays with flow type in function parameters
  array-bracket-spacing:
    - error
    - always
    - arraysInArrays: false
      objectsInArrays: false

  babel/object-curly-spacing:
    - error
    - always
    - arraysInObjects: false
      objectsInObjects: false

  # doesn't fail when using object spread (...obj)
  object-shorthand:
    - error

  # guard against awaiting async functions inside of a loop
  babel/no-await-in-loop:
    - error

# vim: ft=yaml
